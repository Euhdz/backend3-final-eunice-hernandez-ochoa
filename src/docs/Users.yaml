paths:
  /api/users:
    get:
      summary: Get all users from the database
      tags:
        - Users
      responses: 
        "200":
          description: Obtain all users correctly
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: "#components/schemas/User"
        "500":
          description: Server internal error
    post:
      summary: Enpoint to create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: "#components/requestBodies/createUser"
      responses: 
        "201":
          description: User created successfully
        "500": 
          description: Error creating the user
  /api/users/{uid}:
    get:
      summary: Obtain user by ID
      tags: 
        - Users
      parameters:
      - name: uid
        in: path
        required: true
        description: ID of user we are trying to find
        schema: 
          type: string
      responses: 
        "200":
          description: Found user
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: "#components/schemas/User"
        "500": 
          description: Error finding the user
    put: 
      summary: Update user by ID
      tags: 
        - Users
      parameters: 
      - name: uid
        in: path
        required: true
        description: ID of the user we want to update
        schema: 
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: "#components/requestBodies/updateUser"
      responses:
        "200":
          description: User updated successfully
        "404": 
          description: User not found
        "500": 
          description: Internal server error

components: 
  schemas:
    User:
      type: object
      properties:
        _id: 
          type: ObjectId
          description: Id generated byMongoDB
        first_name: 
          type: string
          description: User name
        last_name: 
          type: string
          description: User last name
        password: 
          type: string
          description: User password
      example:
        _id: ObjectId("123456")
        first_name: Juan
        last_name: Perez
        password: 1234
  requestBodies:
    createUser: 
      type: object
      properties:
        first_name: 
          type: string
          description: User name
        last_name: 
          type: string
          description: User last name
        password: 
          type: string
          description: User password
        email: 
          type: string
          description: User email
      example:
        first_name: Lola
        last_name: Lopez
        password: 1234
        email: lola@roca.com
    updateUser:
      type: object
      properties:
        first_name: 
          type: string
          description: User name
        last_name: 
          type: string
          description: User last name
        password: 
          type: string
          description: User password
        email: 
          type: string
          description: User email
      example:
        first_name: Lola
        last_name: Lopez
        password: 1234
        email: lola@laticace.com

        
